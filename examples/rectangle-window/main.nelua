require 'minifb'
require 'memory'

local BUFF_SIZE: uint32 <comptime> = 2 * 512

local buffer: [BUFF_SIZE * BUFF_SIZE]uint32

local function drawSquare(buffer: *[0]uint32, dimen: uint32): void
    memory.set(buffer, 127, dimen * dimen * 4)

    local oneHalfDimen: uint32 <const> = dimen // 2
    local oneQuarterDimen: uint32 <const> = oneHalfDimen // 2
    local threeQuarterDimen: uint32 <const> = oneHalfDimen + oneQuarterDimen

    for x = oneQuarterDimen, threeQuarterDimen - 1 do
        for y = oneQuarterDimen, threeQuarterDimen - 1 do
            buffer[y * dimen + x] = (x & 1) ~= 0 and mfb.ARGB(0xff, 223, 0, (255 * (x - oneQuarterDimen)) // oneHalfDimen) or mfb.ARGB(0xff, 0, 0, 0)
        end
    end
end

drawSquare(&buffer, BUFF_SIZE)

local window: *mfb.window = mfb.open("Rectangle Example", BUFF_SIZE / 2, BUFF_SIZE / 2)
local state: mfb.updateState

repeat
    state = mfb.updateEx(window, &buffer, BUFF_SIZE, BUFF_SIZE)
until not mfb.waitSync(window)
